#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define KEYS_LEFT 0 1 2 3 4 5 6 \
                  14 15 16 17 18 19 20 \
                  28 29 30 31 32 33 34 \
                  46 47 48 49 50 51 \
                  66 67 68 69 70

#define KEYS_RIGHT 7 8 9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                   60 61 62 63 64 65 \
                   77 78 79 80 81

#define THUMBS_LEFT 35 36 54 71 72 73

#define THUMBS_RIGHT 37 38 57 74 75 76

#define THUMBS THUMBS_LEFT THUMBS_RIGHT

&lt {
    quick-tap-ms = <300>;
    global-quick-tap;
};

/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        label = "macro_version";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

      hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap"; // from default https://zmk.dev/docs/behaviors/hold-tap
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
      };

      hm_sft: homerow_mods_shift {
          flavor = "balanced";
          tapping-term-ms = <150>;
          quick-tap-ms = <175>;                // repeat on tap-into-hold
//          require-prior-idle-ms = <150>;
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_LEFT";
          #binding-cells = <2>;
          bindings = <&kp>, <&kp>;
          hold-trigger-on-release;             // delay positional check until key-release
      };

      hm_rpi: homerow_mods_prior_idle {
          flavor = "tap-preferred";
          tapping-term-ms = <250>;
//          quick-tap-ms = <175>;                // repeat on tap-into-hold
          require-prior-idle-ms = <150>;
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_RPI";
          #binding-cells = <2>;
          bindings = <&kp>, <&kp>;
          hold-trigger-on-release;             // delay positional check until key-release
      };

      hm_alt: homerow_mods_alt {
          flavor = "tap-preferred";
          tapping-term-ms = <200>;
//          quick-tap-ms = <175>;                // repeat on tap-into-hold
          require-prior-idle-ms = <190>;
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_ALT";
          #binding-cells = <2>;
          bindings = <&kp>, <&kp>;
          hold-trigger-on-release;             // delay positional check until key-release
      };

      hm_l: homerow_mods_left {
          flavor = "balanced";
          tapping-term-ms = <200>;
          quick-tap-ms = <175>;                // repeat on tap-into-hold
//          require-prior-idle-ms = <150>;
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_LEFT";
          #binding-cells = <2>;
          bindings = <&kp>, <&kp>;
          hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
          hold-trigger-on-release;             // delay positional check until key-release
      };

      hm_r: homerow_mods_right {
          flavor = "balanced";
          tapping-term-ms = <200>;
          quick-tap-ms = <175>;                // repeat on tap-into-hold
//          require-prior-idle-ms = <150>;
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_RIGHT";
          #binding-cells = <2>;
          bindings = <&kp>, <&kp>;
          hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
          hold-trigger-on-release;             // delay positional check until key-release
      };
    };

    // Home row mods
    #define _F_SFT &hm_sft LSHFT F  // Shift on index fingers
    #define _J_SFT &hm_sft RSHFT J
    #define _D_CMD &hm_rpi LGUI D   // Command on middle fingers
    #define _K_CMD &hm_rpi RGUI K
    #define _V_CTL &hm_rpi LCTRL V  // Control on index down
    #define _M_CTL &hm_rpi RCTRL M
    #define _S_OPT &hm_alt LALT S   // Option on ring finger
    #define _L_OPT &hm_alt RALT L

    // MacOS shortcuts
    #define _1PASS &kp LG(BSLH)      // 1Password
    #define _APEX  &kp LC(UP)        // App expos√©
    #define _FQUIT &kp LA(LG(ESC))   // Force quit
    #define _MCTL  &kp LC(DOWN)      // Mission control
    #define _SCRNS &kp LG(LS(N4))    // Screenshot
    #define _EMOJI &kp LC(LG(SPACE)) // Emoji picker
    #define _NEXTS &kp LC(RIGHT)     // Next screen
    #define _PREVS &kp LC(LEFT)      // Previous screen

    #define QWE_K 0 // QWERTY
    #define FUN_K 2 // Function
    #define KEY_K 4 // ColemakDH
    #define MOD_K 3 // ColemakDH
    #define CDH_K 4 // ColemakDH
  

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog KEY_K                                                           &mo MOD_K        &kp N6 &kp N7  &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &kp C_BRI_UP                                                     &kp C_VOL_UP &kp Y  &kp U   &kp I     &kp O    &kp P    &kp BSLH
        &kp ESC   &kp A     _S_OPT   _D_CMD   _F_SFT     &kp G  &kp C_BRI_DN           &kp LGUI &kp LCTRL &kp RALT  &kp RGUI     &kp C_VOL_DN  &kp H  _J_SFT  _K_CMD    _L_OPT   &kp SEMI &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    _V_CTL     &kp B                            &kp HOME &kp PG_UP                                  &kp N  _M_CTL  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &mo FUN_K      &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END  &kp PG_DN &kp ENTER &kp SPACE                     &kp UP   &kp DOWN   &kp LBKT  &kp RBKT &mo FUN_K 
      >;
    };
    keypad {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &trans                                                           &mo MOD_K &kp N6 &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &trans                                                           &trans &kp Y  &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp BSLH
        &kp ESC  &kp A     &kp S    &kp D    &kp F      &kp G  &trans           &kp LGUI &kp LALT &kp RGUI &kp RCTRL           &trans &kp H  &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                            &kp HOME &kp PG_UP                           &kp N  &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &kp RSHFT
        &mo FUN_K     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END  &kp PG_DN &kp ENTER &kp KP_N0              &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo FUN_K 
      >;
    };
    fn {
      bindings = <
        &kp F12 &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &tog KEY_K                                           &mo 3 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11
        &trans  &trans &trans &trans &trans &trans  &none                                           &none &trans &trans &trans &trans  &trans  &trans
        &trans  &trans &trans &trans &trans &trans  &none        &trans &trans &trans &trans        &none &trans &trans &trans &trans  &trans  &trans
        &trans  &trans &trans &trans &trans &trans                      &trans &trans                     &trans &trans &trans &trans  &trans  &trans
        &trans  &trans &trans &kp C_PREV &kp C_NEXT               &trans &trans &trans &trans &trans &kp C_PP              &trans &trans &trans  &trans  &trans
      >;
    };

    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &tog QWE_K    &tog CDH_K    &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &none                   &none &none &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
        &none &none        &none        &tog CDH_K    &macro_ver   &none                                      &none &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
      colemak_dh_layer {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                           &mo 3        &kp N6 &kp N7  &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp F    &kp P      &kp B  &kp C_BRI_UP                                                     &kp C_VOL_UP &kp J  &kp L   &kp U     &kp Y    &kp SEMI    &kp BSLH
        &kp ESC   &kp A     &kp R    &kp S    &kp T     &kp G  &kp C_BRI_DN           &kp LGUI &kp LCTRL &kp RALT  &kp RGUI     &kp C_VOL_DN  &kp M  &kp N   &kp E    &kp I   &kp O &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp D     &kp V                            &kp HOME &kp PG_UP                                  &kp K   &kp H  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &mo FUN_K      &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END  &kp PG_DN &kp ENTER &kp SPACE                     &kp UP   &kp DOWN   &kp LBKT  &kp RBKT &mo FUN_K 
      >;
    };
  };
};
